//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class GodotString : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GodotString(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GodotString obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(GodotString obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~GodotString() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotSharpSwigPINVOKE.delete_GodotString(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public GodotString() : this(GodotSharpSwigPINVOKE.new_GodotString__SWIG_0(), true) {
  }

  public GodotString(GodotString from) : this(GodotSharpSwigPINVOKE.new_GodotString__SWIG_1(GodotString.getCPtr(from)), true) {
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public GodotString(StringName from) : this(GodotSharpSwigPINVOKE.new_GodotString__SWIG_2(StringName.getCPtr(from)), true) {
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public GodotString(SWIGTYPE_p_godot__NodePath from) : this(GodotSharpSwigPINVOKE.new_GodotString__SWIG_3(SWIGTYPE_p_godot__NodePath.getCPtr(from)), true) {
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public GodotString(string from) : this(GodotSharpSwigPINVOKE.new_GodotString__SWIG_5(from), true) {
  }

  public long casecmp_to(GodotString to) {
    long ret = GodotSharpSwigPINVOKE.GodotString_casecmp_to(swigCPtr, GodotString.getCPtr(to));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long nocasecmp_to(GodotString to) {
    long ret = GodotSharpSwigPINVOKE.GodotString_nocasecmp_to(swigCPtr, GodotString.getCPtr(to));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long naturalcasecmp_to(GodotString to) {
    long ret = GodotSharpSwigPINVOKE.GodotString_naturalcasecmp_to(swigCPtr, GodotString.getCPtr(to));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long naturalnocasecmp_to(GodotString to) {
    long ret = GodotSharpSwigPINVOKE.GodotString_naturalnocasecmp_to(swigCPtr, GodotString.getCPtr(to));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long length() {
    long ret = GodotSharpSwigPINVOKE.GodotString_length(swigCPtr);
    return ret;
  }

  public GodotString substr(long from, long len) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_substr__SWIG_0(swigCPtr, from, len), true);
    return ret;
  }

  public GodotString substr(long from) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_substr__SWIG_1(swigCPtr, from), true);
    return ret;
  }

  public GodotString get_slice(GodotString delimiter, long slice) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_get_slice(swigCPtr, GodotString.getCPtr(delimiter), slice), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString get_slicec(long delimiter, long slice) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_get_slicec(swigCPtr, delimiter, slice), true);
    return ret;
  }

  public long get_slice_count(GodotString delimiter) {
    long ret = GodotSharpSwigPINVOKE.GodotString_get_slice_count(swigCPtr, GodotString.getCPtr(delimiter));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long find(GodotString what, long from) {
    long ret = GodotSharpSwigPINVOKE.GodotString_find__SWIG_0(swigCPtr, GodotString.getCPtr(what), from);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long find(GodotString what) {
    long ret = GodotSharpSwigPINVOKE.GodotString_find__SWIG_1(swigCPtr, GodotString.getCPtr(what));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long count(GodotString what, long from, long to) {
    long ret = GodotSharpSwigPINVOKE.GodotString_count__SWIG_0(swigCPtr, GodotString.getCPtr(what), from, to);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long count(GodotString what, long from) {
    long ret = GodotSharpSwigPINVOKE.GodotString_count__SWIG_1(swigCPtr, GodotString.getCPtr(what), from);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long count(GodotString what) {
    long ret = GodotSharpSwigPINVOKE.GodotString_count__SWIG_2(swigCPtr, GodotString.getCPtr(what));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long countn(GodotString what, long from, long to) {
    long ret = GodotSharpSwigPINVOKE.GodotString_countn__SWIG_0(swigCPtr, GodotString.getCPtr(what), from, to);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long countn(GodotString what, long from) {
    long ret = GodotSharpSwigPINVOKE.GodotString_countn__SWIG_1(swigCPtr, GodotString.getCPtr(what), from);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long countn(GodotString what) {
    long ret = GodotSharpSwigPINVOKE.GodotString_countn__SWIG_2(swigCPtr, GodotString.getCPtr(what));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long findn(GodotString what, long from) {
    long ret = GodotSharpSwigPINVOKE.GodotString_findn__SWIG_0(swigCPtr, GodotString.getCPtr(what), from);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long findn(GodotString what) {
    long ret = GodotSharpSwigPINVOKE.GodotString_findn__SWIG_1(swigCPtr, GodotString.getCPtr(what));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long rfind(GodotString what, long from) {
    long ret = GodotSharpSwigPINVOKE.GodotString_rfind__SWIG_0(swigCPtr, GodotString.getCPtr(what), from);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long rfind(GodotString what) {
    long ret = GodotSharpSwigPINVOKE.GodotString_rfind__SWIG_1(swigCPtr, GodotString.getCPtr(what));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long rfindn(GodotString what, long from) {
    long ret = GodotSharpSwigPINVOKE.GodotString_rfindn__SWIG_0(swigCPtr, GodotString.getCPtr(what), from);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long rfindn(GodotString what) {
    long ret = GodotSharpSwigPINVOKE.GodotString_rfindn__SWIG_1(swigCPtr, GodotString.getCPtr(what));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool match(GodotString expr) {
    bool ret = GodotSharpSwigPINVOKE.GodotString_match(swigCPtr, GodotString.getCPtr(expr));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool matchn(GodotString expr) {
    bool ret = GodotSharpSwigPINVOKE.GodotString_matchn(swigCPtr, GodotString.getCPtr(expr));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool begins_with(GodotString text) {
    bool ret = GodotSharpSwigPINVOKE.GodotString_begins_with(swigCPtr, GodotString.getCPtr(text));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ends_with(GodotString text) {
    bool ret = GodotSharpSwigPINVOKE.GodotString_ends_with(swigCPtr, GodotString.getCPtr(text));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_subsequence_of(GodotString text) {
    bool ret = GodotSharpSwigPINVOKE.GodotString_is_subsequence_of(swigCPtr, GodotString.getCPtr(text));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_subsequence_ofn(GodotString text) {
    bool ret = GodotSharpSwigPINVOKE.GodotString_is_subsequence_ofn(swigCPtr, GodotString.getCPtr(text));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__PackedStringArray bigrams() {
    SWIGTYPE_p_godot__PackedStringArray ret = new SWIGTYPE_p_godot__PackedStringArray(GodotSharpSwigPINVOKE.GodotString_bigrams(swigCPtr), true);
    return ret;
  }

  public double similarity(GodotString text) {
    double ret = GodotSharpSwigPINVOKE.GodotString_similarity(swigCPtr, GodotString.getCPtr(text));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString format(Variant values, GodotString placeholder) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_format__SWIG_0(swigCPtr, Variant.getCPtr(values), GodotString.getCPtr(placeholder)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString format(Variant values) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_format__SWIG_1(swigCPtr, Variant.getCPtr(values)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString replace(GodotString what, GodotString forwhat) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_replace(swigCPtr, GodotString.getCPtr(what), GodotString.getCPtr(forwhat)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString replacen(GodotString what, GodotString forwhat) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_replacen(swigCPtr, GodotString.getCPtr(what), GodotString.getCPtr(forwhat)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString repeat(long count) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_repeat(swigCPtr, count), true);
    return ret;
  }

  public GodotString insert(long position, GodotString what) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_insert(swigCPtr, position, GodotString.getCPtr(what)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString erase(long position, long chars) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_erase__SWIG_0(swigCPtr, position, chars), true);
    return ret;
  }

  public GodotString erase(long position) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_erase__SWIG_1(swigCPtr, position), true);
    return ret;
  }

  public GodotString capitalize() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_capitalize(swigCPtr), true);
    return ret;
  }

  public GodotString to_camel_case() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_to_camel_case(swigCPtr), true);
    return ret;
  }

  public GodotString to_pascal_case() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_to_pascal_case(swigCPtr), true);
    return ret;
  }

  public GodotString to_snake_case() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_to_snake_case(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_godot__PackedStringArray split(GodotString delimiter, bool allow_empty, long maxsplit) {
    SWIGTYPE_p_godot__PackedStringArray ret = new SWIGTYPE_p_godot__PackedStringArray(GodotSharpSwigPINVOKE.GodotString_split__SWIG_0(swigCPtr, GodotString.getCPtr(delimiter), allow_empty, maxsplit), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__PackedStringArray split(GodotString delimiter, bool allow_empty) {
    SWIGTYPE_p_godot__PackedStringArray ret = new SWIGTYPE_p_godot__PackedStringArray(GodotSharpSwigPINVOKE.GodotString_split__SWIG_1(swigCPtr, GodotString.getCPtr(delimiter), allow_empty), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__PackedStringArray split(GodotString delimiter) {
    SWIGTYPE_p_godot__PackedStringArray ret = new SWIGTYPE_p_godot__PackedStringArray(GodotSharpSwigPINVOKE.GodotString_split__SWIG_2(swigCPtr, GodotString.getCPtr(delimiter)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__PackedStringArray split() {
    SWIGTYPE_p_godot__PackedStringArray ret = new SWIGTYPE_p_godot__PackedStringArray(GodotSharpSwigPINVOKE.GodotString_split__SWIG_3(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_godot__PackedStringArray rsplit(GodotString delimiter, bool allow_empty, long maxsplit) {
    SWIGTYPE_p_godot__PackedStringArray ret = new SWIGTYPE_p_godot__PackedStringArray(GodotSharpSwigPINVOKE.GodotString_rsplit__SWIG_0(swigCPtr, GodotString.getCPtr(delimiter), allow_empty, maxsplit), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__PackedStringArray rsplit(GodotString delimiter, bool allow_empty) {
    SWIGTYPE_p_godot__PackedStringArray ret = new SWIGTYPE_p_godot__PackedStringArray(GodotSharpSwigPINVOKE.GodotString_rsplit__SWIG_1(swigCPtr, GodotString.getCPtr(delimiter), allow_empty), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__PackedStringArray rsplit(GodotString delimiter) {
    SWIGTYPE_p_godot__PackedStringArray ret = new SWIGTYPE_p_godot__PackedStringArray(GodotSharpSwigPINVOKE.GodotString_rsplit__SWIG_2(swigCPtr, GodotString.getCPtr(delimiter)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__PackedStringArray rsplit() {
    SWIGTYPE_p_godot__PackedStringArray ret = new SWIGTYPE_p_godot__PackedStringArray(GodotSharpSwigPINVOKE.GodotString_rsplit__SWIG_3(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_godot__PackedFloat64Array split_floats(GodotString delimiter, bool allow_empty) {
    SWIGTYPE_p_godot__PackedFloat64Array ret = new SWIGTYPE_p_godot__PackedFloat64Array(GodotSharpSwigPINVOKE.GodotString_split_floats__SWIG_0(swigCPtr, GodotString.getCPtr(delimiter), allow_empty), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__PackedFloat64Array split_floats(GodotString delimiter) {
    SWIGTYPE_p_godot__PackedFloat64Array ret = new SWIGTYPE_p_godot__PackedFloat64Array(GodotSharpSwigPINVOKE.GodotString_split_floats__SWIG_1(swigCPtr, GodotString.getCPtr(delimiter)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString join(SWIGTYPE_p_godot__PackedStringArray parts) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_join(swigCPtr, SWIGTYPE_p_godot__PackedStringArray.getCPtr(parts)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString to_upper() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_to_upper(swigCPtr), true);
    return ret;
  }

  public GodotString to_lower() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_to_lower(swigCPtr), true);
    return ret;
  }

  public GodotString left(long length) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_left(swigCPtr, length), true);
    return ret;
  }

  public GodotString right(long length) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_right(swigCPtr, length), true);
    return ret;
  }

  public GodotString strip_edges(bool left, bool right) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_strip_edges__SWIG_0(swigCPtr, left, right), true);
    return ret;
  }

  public GodotString strip_edges(bool left) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_strip_edges__SWIG_1(swigCPtr, left), true);
    return ret;
  }

  public GodotString strip_edges() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_strip_edges__SWIG_2(swigCPtr), true);
    return ret;
  }

  public GodotString strip_escapes() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_strip_escapes(swigCPtr), true);
    return ret;
  }

  public GodotString lstrip(GodotString chars) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_lstrip(swigCPtr, GodotString.getCPtr(chars)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString rstrip(GodotString chars) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_rstrip(swigCPtr, GodotString.getCPtr(chars)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString get_extension() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_get_extension(swigCPtr), true);
    return ret;
  }

  public GodotString get_basename() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_get_basename(swigCPtr), true);
    return ret;
  }

  public GodotString path_join(GodotString file) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_path_join(swigCPtr, GodotString.getCPtr(file)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long unicode_at(long at) {
    long ret = GodotSharpSwigPINVOKE.GodotString_unicode_at(swigCPtr, at);
    return ret;
  }

  public GodotString indent(GodotString prefix) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_indent(swigCPtr, GodotString.getCPtr(prefix)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString dedent() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_dedent(swigCPtr), true);
    return ret;
  }

  public long hash() {
    long ret = GodotSharpSwigPINVOKE.GodotString_hash(swigCPtr);
    return ret;
  }

  public GodotString md5_text() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_md5_text(swigCPtr), true);
    return ret;
  }

  public GodotString sha1_text() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_sha1_text(swigCPtr), true);
    return ret;
  }

  public GodotString sha256_text() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_sha256_text(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_godot__PackedByteArray md5_buffer() {
    SWIGTYPE_p_godot__PackedByteArray ret = new SWIGTYPE_p_godot__PackedByteArray(GodotSharpSwigPINVOKE.GodotString_md5_buffer(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_godot__PackedByteArray sha1_buffer() {
    SWIGTYPE_p_godot__PackedByteArray ret = new SWIGTYPE_p_godot__PackedByteArray(GodotSharpSwigPINVOKE.GodotString_sha1_buffer(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_godot__PackedByteArray sha256_buffer() {
    SWIGTYPE_p_godot__PackedByteArray ret = new SWIGTYPE_p_godot__PackedByteArray(GodotSharpSwigPINVOKE.GodotString_sha256_buffer(swigCPtr), true);
    return ret;
  }

  public bool is_empty() {
    bool ret = GodotSharpSwigPINVOKE.GodotString_is_empty(swigCPtr);
    return ret;
  }

  public bool contains(GodotString what) {
    bool ret = GodotSharpSwigPINVOKE.GodotString_contains(swigCPtr, GodotString.getCPtr(what));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_absolute_path() {
    bool ret = GodotSharpSwigPINVOKE.GodotString_is_absolute_path(swigCPtr);
    return ret;
  }

  public bool is_relative_path() {
    bool ret = GodotSharpSwigPINVOKE.GodotString_is_relative_path(swigCPtr);
    return ret;
  }

  public GodotString simplify_path() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_simplify_path(swigCPtr), true);
    return ret;
  }

  public GodotString get_base_dir() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_get_base_dir(swigCPtr), true);
    return ret;
  }

  public GodotString get_file() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_get_file(swigCPtr), true);
    return ret;
  }

  public GodotString xml_escape(bool escape_quotes) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_xml_escape__SWIG_0(swigCPtr, escape_quotes), true);
    return ret;
  }

  public GodotString xml_escape() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_xml_escape__SWIG_1(swigCPtr), true);
    return ret;
  }

  public GodotString xml_unescape() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_xml_unescape(swigCPtr), true);
    return ret;
  }

  public GodotString uri_encode() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_uri_encode(swigCPtr), true);
    return ret;
  }

  public GodotString uri_decode() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_uri_decode(swigCPtr), true);
    return ret;
  }

  public GodotString c_escape() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_c_escape(swigCPtr), true);
    return ret;
  }

  public GodotString c_unescape() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_c_unescape(swigCPtr), true);
    return ret;
  }

  public GodotString json_escape() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_json_escape(swigCPtr), true);
    return ret;
  }

  public GodotString validate_node_name() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_validate_node_name(swigCPtr), true);
    return ret;
  }

  public GodotString validate_filename() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_validate_filename(swigCPtr), true);
    return ret;
  }

  public bool is_valid_identifier() {
    bool ret = GodotSharpSwigPINVOKE.GodotString_is_valid_identifier(swigCPtr);
    return ret;
  }

  public bool is_valid_int() {
    bool ret = GodotSharpSwigPINVOKE.GodotString_is_valid_int(swigCPtr);
    return ret;
  }

  public bool is_valid_float() {
    bool ret = GodotSharpSwigPINVOKE.GodotString_is_valid_float(swigCPtr);
    return ret;
  }

  public bool is_valid_hex_number(bool with_prefix) {
    bool ret = GodotSharpSwigPINVOKE.GodotString_is_valid_hex_number__SWIG_0(swigCPtr, with_prefix);
    return ret;
  }

  public bool is_valid_hex_number() {
    bool ret = GodotSharpSwigPINVOKE.GodotString_is_valid_hex_number__SWIG_1(swigCPtr);
    return ret;
  }

  public bool is_valid_html_color() {
    bool ret = GodotSharpSwigPINVOKE.GodotString_is_valid_html_color(swigCPtr);
    return ret;
  }

  public bool is_valid_ip_address() {
    bool ret = GodotSharpSwigPINVOKE.GodotString_is_valid_ip_address(swigCPtr);
    return ret;
  }

  public bool is_valid_filename() {
    bool ret = GodotSharpSwigPINVOKE.GodotString_is_valid_filename(swigCPtr);
    return ret;
  }

  public long to_int() {
    long ret = GodotSharpSwigPINVOKE.GodotString_to_int(swigCPtr);
    return ret;
  }

  public double to_float() {
    double ret = GodotSharpSwigPINVOKE.GodotString_to_float(swigCPtr);
    return ret;
  }

  public long hex_to_int() {
    long ret = GodotSharpSwigPINVOKE.GodotString_hex_to_int(swigCPtr);
    return ret;
  }

  public long bin_to_int() {
    long ret = GodotSharpSwigPINVOKE.GodotString_bin_to_int(swigCPtr);
    return ret;
  }

  public GodotString lpad(long min_length, GodotString character) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_lpad__SWIG_0(swigCPtr, min_length, GodotString.getCPtr(character)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString lpad(long min_length) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_lpad__SWIG_1(swigCPtr, min_length), true);
    return ret;
  }

  public GodotString rpad(long min_length, GodotString character) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_rpad__SWIG_0(swigCPtr, min_length, GodotString.getCPtr(character)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString rpad(long min_length) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_rpad__SWIG_1(swigCPtr, min_length), true);
    return ret;
  }

  public GodotString pad_decimals(long digits) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_pad_decimals(swigCPtr, digits), true);
    return ret;
  }

  public GodotString pad_zeros(long digits) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_pad_zeros(swigCPtr, digits), true);
    return ret;
  }

  public GodotString trim_prefix(GodotString prefix) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_trim_prefix(swigCPtr, GodotString.getCPtr(prefix)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString trim_suffix(GodotString suffix) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_trim_suffix(swigCPtr, GodotString.getCPtr(suffix)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__PackedByteArray to_ascii_buffer() {
    SWIGTYPE_p_godot__PackedByteArray ret = new SWIGTYPE_p_godot__PackedByteArray(GodotSharpSwigPINVOKE.GodotString_to_ascii_buffer(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_godot__PackedByteArray to_utf8_buffer() {
    SWIGTYPE_p_godot__PackedByteArray ret = new SWIGTYPE_p_godot__PackedByteArray(GodotSharpSwigPINVOKE.GodotString_to_utf8_buffer(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_godot__PackedByteArray to_utf16_buffer() {
    SWIGTYPE_p_godot__PackedByteArray ret = new SWIGTYPE_p_godot__PackedByteArray(GodotSharpSwigPINVOKE.GodotString_to_utf16_buffer(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_godot__PackedByteArray to_utf32_buffer() {
    SWIGTYPE_p_godot__PackedByteArray ret = new SWIGTYPE_p_godot__PackedByteArray(GodotSharpSwigPINVOKE.GodotString_to_utf32_buffer(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_godot__PackedByteArray hex_decode() {
    SWIGTYPE_p_godot__PackedByteArray ret = new SWIGTYPE_p_godot__PackedByteArray(GodotSharpSwigPINVOKE.GodotString_hex_decode(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_godot__PackedByteArray to_wchar_buffer() {
    SWIGTYPE_p_godot__PackedByteArray ret = new SWIGTYPE_p_godot__PackedByteArray(GodotSharpSwigPINVOKE.GodotString_to_wchar_buffer(swigCPtr), true);
    return ret;
  }

  public static GodotString num_scientific(double number) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_num_scientific(number), true);
    return ret;
  }

  public static GodotString num(double number, long decimals) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_num__SWIG_0(number, decimals), true);
    return ret;
  }

  public static GodotString num(double number) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_num__SWIG_1(number), true);
    return ret;
  }

  public static GodotString num_int64(long number, long base_, bool capitalize_hex) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_num_int64__SWIG_0(number, base_, capitalize_hex), true);
    return ret;
  }

  public static GodotString num_int64(long number, long base_) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_num_int64__SWIG_1(number, base_), true);
    return ret;
  }

  public static GodotString num_int64(long number) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_num_int64__SWIG_2(number), true);
    return ret;
  }

  public static GodotString num_uint64(long number, long base_, bool capitalize_hex) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_num_uint64__SWIG_0(number, base_, capitalize_hex), true);
    return ret;
  }

  public static GodotString num_uint64(long number, long base_) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_num_uint64__SWIG_1(number, base_), true);
    return ret;
  }

  public static GodotString num_uint64(long number) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_num_uint64__SWIG_2(number), true);
    return ret;
  }

  public static GodotString chr(long _char) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_chr(_char), true);
    return ret;
  }

  public static GodotString humanize_size(long size) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_humanize_size(size), true);
    return ret;
  }

  public static GodotString utf8(string from, int len) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_utf8__SWIG_0(from, len), true);
    return ret;
  }

  public static GodotString utf8(string from) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_utf8__SWIG_1(from), true);
    return ret;
  }

  public void parse_utf8(string from, int len) {
    GodotSharpSwigPINVOKE.GodotString_parse_utf8__SWIG_0(swigCPtr, from, len);
  }

  public void parse_utf8(string from) {
    GodotSharpSwigPINVOKE.GodotString_parse_utf8__SWIG_1(swigCPtr, from);
  }

  public static GodotString utf16(SWIGTYPE_p_char16_t from, int len) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_utf16__SWIG_0(SWIGTYPE_p_char16_t.getCPtr(from), len), true);
    return ret;
  }

  public static GodotString utf16(SWIGTYPE_p_char16_t from) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_utf16__SWIG_1(SWIGTYPE_p_char16_t.getCPtr(from)), true);
    return ret;
  }

  public void parse_utf16(SWIGTYPE_p_char16_t from, int len) {
    GodotSharpSwigPINVOKE.GodotString_parse_utf16__SWIG_0(swigCPtr, SWIGTYPE_p_char16_t.getCPtr(from), len);
  }

  public void parse_utf16(SWIGTYPE_p_char16_t from) {
    GodotSharpSwigPINVOKE.GodotString_parse_utf16__SWIG_1(swigCPtr, SWIGTYPE_p_char16_t.getCPtr(from));
  }

  public static GodotString num_real(double p_num, bool p_trailing) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_num_real__SWIG_0(p_num, p_trailing), true);
    return ret;
  }

  public static GodotString num_real(double p_num) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotString_num_real__SWIG_1(p_num), true);
    return ret;
  }

  public bool operatornot() {
    bool ret = GodotSharpSwigPINVOKE.GodotString_operatornot(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_char32_t ptr() {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.GodotString_ptr(swigCPtr);
    SWIGTYPE_p_char32_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_char32_t(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_char32_t ptrw() {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.GodotString_ptrw(swigCPtr);
    SWIGTYPE_p_char32_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_char32_t(cPtr, false);
    return ret;
  }

  public string AsString() {
    string ret = GodotSharpSwigPINVOKE.GodotString_AsString(swigCPtr);
    return ret;
  }

}
