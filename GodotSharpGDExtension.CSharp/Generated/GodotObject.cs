//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class GodotObject : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public GodotObject(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GodotObject obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(GodotObject obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~GodotObject() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotSharpSwigPINVOKE.delete_GodotObject(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public GodotString get_class() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotObject_get_class(swigCPtr), true);
    return ret;
  }

  public bool is_class(GodotString _class) {
    bool ret = GodotSharpSwigPINVOKE.GodotObject_is_class(swigCPtr, GodotString.getCPtr(_class));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(StringName property, Variant value) {
    GodotSharpSwigPINVOKE.GodotObject_set(swigCPtr, StringName.getCPtr(property), Variant.getCPtr(value));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public Variant get(StringName property) {
    Variant ret = new Variant(GodotSharpSwigPINVOKE.GodotObject_get(swigCPtr, StringName.getCPtr(property)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_indexed(SWIGTYPE_p_godot__NodePath property_path, Variant value) {
    GodotSharpSwigPINVOKE.GodotObject_set_indexed(swigCPtr, SWIGTYPE_p_godot__NodePath.getCPtr(property_path), Variant.getCPtr(value));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public Variant get_indexed(SWIGTYPE_p_godot__NodePath property_path) {
    Variant ret = new Variant(GodotSharpSwigPINVOKE.GodotObject_get_indexed(swigCPtr, SWIGTYPE_p_godot__NodePath.getCPtr(property_path)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__TypedArrayT_godot__Dictionary_t get_property_list() {
    SWIGTYPE_p_godot__TypedArrayT_godot__Dictionary_t ret = new SWIGTYPE_p_godot__TypedArrayT_godot__Dictionary_t(GodotSharpSwigPINVOKE.GodotObject_get_property_list(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_godot__TypedArrayT_godot__Dictionary_t get_method_list() {
    SWIGTYPE_p_godot__TypedArrayT_godot__Dictionary_t ret = new SWIGTYPE_p_godot__TypedArrayT_godot__Dictionary_t(GodotSharpSwigPINVOKE.GodotObject_get_method_list(swigCPtr), true);
    return ret;
  }

  public bool property_can_revert(StringName property) {
    bool ret = GodotSharpSwigPINVOKE.GodotObject_property_can_revert(swigCPtr, StringName.getCPtr(property));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Variant property_get_revert(StringName property) {
    Variant ret = new Variant(GodotSharpSwigPINVOKE.GodotObject_property_get_revert(swigCPtr, StringName.getCPtr(property)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void notification(int what, bool reversed) {
    GodotSharpSwigPINVOKE.GodotObject_notification__SWIG_0(swigCPtr, what, reversed);
  }

  public void notification(int what) {
    GodotSharpSwigPINVOKE.GodotObject_notification__SWIG_1(swigCPtr, what);
  }

  public GodotString to_string() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotObject_to_string(swigCPtr), true);
    return ret;
  }

  public ulong get_instance_id() {
    ulong ret = GodotSharpSwigPINVOKE.GodotObject_get_instance_id(swigCPtr);
    return ret;
  }

  public void set_script(Variant script) {
    GodotSharpSwigPINVOKE.GodotObject_set_script(swigCPtr, Variant.getCPtr(script));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public Variant get_script() {
    Variant ret = new Variant(GodotSharpSwigPINVOKE.GodotObject_get_script(swigCPtr), true);
    return ret;
  }

  public void set_meta(StringName name, Variant value) {
    GodotSharpSwigPINVOKE.GodotObject_set_meta(swigCPtr, StringName.getCPtr(name), Variant.getCPtr(value));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void remove_meta(StringName name) {
    GodotSharpSwigPINVOKE.GodotObject_remove_meta(swigCPtr, StringName.getCPtr(name));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public Variant get_meta(StringName name, Variant _default) {
    Variant ret = new Variant(GodotSharpSwigPINVOKE.GodotObject_get_meta__SWIG_0(swigCPtr, StringName.getCPtr(name), Variant.getCPtr(_default)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Variant get_meta(StringName name) {
    Variant ret = new Variant(GodotSharpSwigPINVOKE.GodotObject_get_meta__SWIG_1(swigCPtr, StringName.getCPtr(name)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_meta(StringName name) {
    bool ret = GodotSharpSwigPINVOKE.GodotObject_has_meta(swigCPtr, StringName.getCPtr(name));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__TypedArrayT_godot__StringName_t get_meta_list() {
    SWIGTYPE_p_godot__TypedArrayT_godot__StringName_t ret = new SWIGTYPE_p_godot__TypedArrayT_godot__StringName_t(GodotSharpSwigPINVOKE.GodotObject_get_meta_list(swigCPtr), true);
    return ret;
  }

  public void add_user_signal(GodotString signal, Array arguments) {
    GodotSharpSwigPINVOKE.GodotObject_add_user_signal__SWIG_0(swigCPtr, GodotString.getCPtr(signal), Array.getCPtr(arguments));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_user_signal(GodotString signal) {
    GodotSharpSwigPINVOKE.GodotObject_add_user_signal__SWIG_1(swigCPtr, GodotString.getCPtr(signal));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool has_user_signal(StringName signal) {
    bool ret = GodotSharpSwigPINVOKE.GodotObject_has_user_signal(swigCPtr, StringName.getCPtr(signal));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_deferred(StringName property, Variant value) {
    GodotSharpSwigPINVOKE.GodotObject_set_deferred(swigCPtr, StringName.getCPtr(property), Variant.getCPtr(value));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public Variant callv(StringName method, Array arg_array) {
    Variant ret = new Variant(GodotSharpSwigPINVOKE.GodotObject_callv(swigCPtr, StringName.getCPtr(method), Array.getCPtr(arg_array)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_method(StringName method) {
    bool ret = GodotSharpSwigPINVOKE.GodotObject_has_method(swigCPtr, StringName.getCPtr(method));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_signal(StringName signal) {
    bool ret = GodotSharpSwigPINVOKE.GodotObject_has_signal(swigCPtr, StringName.getCPtr(signal));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__TypedArrayT_godot__Dictionary_t get_signal_list() {
    SWIGTYPE_p_godot__TypedArrayT_godot__Dictionary_t ret = new SWIGTYPE_p_godot__TypedArrayT_godot__Dictionary_t(GodotSharpSwigPINVOKE.GodotObject_get_signal_list(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_godot__TypedArrayT_godot__Dictionary_t get_signal_connection_list(StringName signal) {
    SWIGTYPE_p_godot__TypedArrayT_godot__Dictionary_t ret = new SWIGTYPE_p_godot__TypedArrayT_godot__Dictionary_t(GodotSharpSwigPINVOKE.GodotObject_get_signal_connection_list(swigCPtr, StringName.getCPtr(signal)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__TypedArrayT_godot__Dictionary_t get_incoming_connections() {
    SWIGTYPE_p_godot__TypedArrayT_godot__Dictionary_t ret = new SWIGTYPE_p_godot__TypedArrayT_godot__Dictionary_t(GodotSharpSwigPINVOKE.GodotObject_get_incoming_connections(swigCPtr), true);
    return ret;
  }

  public Error connect(StringName signal, SWIGTYPE_p_godot__Callable callable, uint flags) {
    Error ret = (Error)GodotSharpSwigPINVOKE.GodotObject_connect__SWIG_0(swigCPtr, StringName.getCPtr(signal), SWIGTYPE_p_godot__Callable.getCPtr(callable), flags);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Error connect(StringName signal, SWIGTYPE_p_godot__Callable callable) {
    Error ret = (Error)GodotSharpSwigPINVOKE.GodotObject_connect__SWIG_1(swigCPtr, StringName.getCPtr(signal), SWIGTYPE_p_godot__Callable.getCPtr(callable));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void disconnect(StringName signal, SWIGTYPE_p_godot__Callable callable) {
    GodotSharpSwigPINVOKE.GodotObject_disconnect(swigCPtr, StringName.getCPtr(signal), SWIGTYPE_p_godot__Callable.getCPtr(callable));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool is_connected(StringName signal, SWIGTYPE_p_godot__Callable callable) {
    bool ret = GodotSharpSwigPINVOKE.GodotObject_is_connected(swigCPtr, StringName.getCPtr(signal), SWIGTYPE_p_godot__Callable.getCPtr(callable));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_block_signals(bool enable) {
    GodotSharpSwigPINVOKE.GodotObject_set_block_signals(swigCPtr, enable);
  }

  public bool is_blocking_signals() {
    bool ret = GodotSharpSwigPINVOKE.GodotObject_is_blocking_signals(swigCPtr);
    return ret;
  }

  public void notify_property_list_changed() {
    GodotSharpSwigPINVOKE.GodotObject_notify_property_list_changed(swigCPtr);
  }

  public void set_message_translation(bool enable) {
    GodotSharpSwigPINVOKE.GodotObject_set_message_translation(swigCPtr, enable);
  }

  public bool can_translate_messages() {
    bool ret = GodotSharpSwigPINVOKE.GodotObject_can_translate_messages(swigCPtr);
    return ret;
  }

  public GodotString tr(StringName message, StringName context) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotObject_tr__SWIG_0(swigCPtr, StringName.getCPtr(message), StringName.getCPtr(context)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString tr(StringName message) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotObject_tr__SWIG_1(swigCPtr, StringName.getCPtr(message)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString tr_n(StringName message, StringName plural_message, int n, StringName context) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotObject_tr_n__SWIG_0(swigCPtr, StringName.getCPtr(message), StringName.getCPtr(plural_message), n, StringName.getCPtr(context)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GodotString tr_n(StringName message, StringName plural_message, int n) {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.GodotObject_tr_n__SWIG_1(swigCPtr, StringName.getCPtr(message), StringName.getCPtr(plural_message), n), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_queued_for_deletion() {
    bool ret = GodotSharpSwigPINVOKE.GodotObject_is_queued_for_deletion(swigCPtr);
    return ret;
  }

  public void cancel_free() {
    GodotSharpSwigPINVOKE.GodotObject_cancel_free(swigCPtr);
  }

  public GodotObject() : this(GodotSharpSwigPINVOKE.new_GodotObject(), true) {
  }

  public enum ConnectFlags {
    CONNECT_DEFERRED = 1,
    CONNECT_PERSIST = 2,
    CONNECT_ONE_SHOT = 4,
    CONNECT_REFERENCE_COUNTED = 8
  }

  public static readonly int NOTIFICATION_POSTINITIALIZE = GodotSharpSwigPINVOKE.GodotObject_NOTIFICATION_POSTINITIALIZE_get();
  public static readonly int NOTIFICATION_PREDELETE = GodotSharpSwigPINVOKE.GodotObject_NOTIFICATION_PREDELETE_get();
}
