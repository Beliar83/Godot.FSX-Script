//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PropertyInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PropertyInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PropertyInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PropertyInfo obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PropertyInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotSharpSwigPINVOKE.delete_PropertyInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Variant.Type type {
    set {
      GodotSharpSwigPINVOKE.PropertyInfo_type_set(swigCPtr, (int)value);
    } 
    get {
      Variant.Type ret = (Variant.Type)GodotSharpSwigPINVOKE.PropertyInfo_type_get(swigCPtr);
      return ret;
    } 
  }

  public StringName name {
    set {
      GodotSharpSwigPINVOKE.PropertyInfo_name_set(swigCPtr, StringName.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.PropertyInfo_name_get(swigCPtr);
      StringName ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringName(cPtr, false);
      return ret;
    } 
  }

  public StringName class_name {
    set {
      GodotSharpSwigPINVOKE.PropertyInfo_class_name_set(swigCPtr, StringName.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.PropertyInfo_class_name_get(swigCPtr);
      StringName ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringName(cPtr, false);
      return ret;
    } 
  }

  public uint hint {
    set {
      GodotSharpSwigPINVOKE.PropertyInfo_hint_set(swigCPtr, value);
    } 
    get {
      uint ret = GodotSharpSwigPINVOKE.PropertyInfo_hint_get(swigCPtr);
      return ret;
    } 
  }

  public GodotString hint_string {
    set {
      GodotSharpSwigPINVOKE.PropertyInfo_hint_string_set(swigCPtr, GodotString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.PropertyInfo_hint_string_get(swigCPtr);
      GodotString ret = (cPtr == global::System.IntPtr.Zero) ? null : new GodotString(cPtr, false);
      return ret;
    } 
  }

  public uint usage {
    set {
      GodotSharpSwigPINVOKE.PropertyInfo_usage_set(swigCPtr, value);
    } 
    get {
      uint ret = GodotSharpSwigPINVOKE.PropertyInfo_usage_get(swigCPtr);
      return ret;
    } 
  }

  public PropertyInfo() : this(GodotSharpSwigPINVOKE.new_PropertyInfo__SWIG_0(), true) {
  }

  public PropertyInfo(Variant.Type p_type, StringName p_name, PropertyHint p_hint, GodotString p_hint_string, uint p_usage, StringName p_class_name) : this(GodotSharpSwigPINVOKE.new_PropertyInfo__SWIG_1((int)p_type, StringName.getCPtr(p_name), (int)p_hint, GodotString.getCPtr(p_hint_string), p_usage, StringName.getCPtr(p_class_name)), true) {
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public PropertyInfo(Variant.Type p_type, StringName p_name, PropertyHint p_hint, GodotString p_hint_string, uint p_usage) : this(GodotSharpSwigPINVOKE.new_PropertyInfo__SWIG_2((int)p_type, StringName.getCPtr(p_name), (int)p_hint, GodotString.getCPtr(p_hint_string), p_usage), true) {
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public PropertyInfo(Variant.Type p_type, StringName p_name, PropertyHint p_hint, GodotString p_hint_string) : this(GodotSharpSwigPINVOKE.new_PropertyInfo__SWIG_3((int)p_type, StringName.getCPtr(p_name), (int)p_hint, GodotString.getCPtr(p_hint_string)), true) {
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public PropertyInfo(Variant.Type p_type, StringName p_name, PropertyHint p_hint) : this(GodotSharpSwigPINVOKE.new_PropertyInfo__SWIG_4((int)p_type, StringName.getCPtr(p_name), (int)p_hint), true) {
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public PropertyInfo(Variant.Type p_type, StringName p_name) : this(GodotSharpSwigPINVOKE.new_PropertyInfo__SWIG_5((int)p_type, StringName.getCPtr(p_name)), true) {
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

}
