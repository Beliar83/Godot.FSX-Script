//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Node : GodotObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Node(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotSharpSwigPINVOKE.Node_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Node obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Node obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotSharpSwigPINVOKE.delete_Node(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public static void print_orphan_nodes() {
    GodotSharpSwigPINVOKE.Node_print_orphan_nodes();
  }

  public void add_sibling(Node sibling, bool force_readable_name) {
    GodotSharpSwigPINVOKE.Node_add_sibling__SWIG_0(swigCPtr, Node.getCPtr(sibling), force_readable_name);
  }

  public void add_sibling(Node sibling) {
    GodotSharpSwigPINVOKE.Node_add_sibling__SWIG_1(swigCPtr, Node.getCPtr(sibling));
  }

  public void set_name(GodotString name) {
    GodotSharpSwigPINVOKE.Node_set_name(swigCPtr, GodotString.getCPtr(name));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringName get_name() {
    StringName ret = new StringName(GodotSharpSwigPINVOKE.Node_get_name(swigCPtr), true);
    return ret;
  }

  public void add_child(Node node, bool force_readable_name, Node.InternalMode internal_) {
    GodotSharpSwigPINVOKE.Node_add_child__SWIG_0(swigCPtr, Node.getCPtr(node), force_readable_name, (int)internal_);
  }

  public void add_child(Node node, bool force_readable_name) {
    GodotSharpSwigPINVOKE.Node_add_child__SWIG_1(swigCPtr, Node.getCPtr(node), force_readable_name);
  }

  public void add_child(Node node) {
    GodotSharpSwigPINVOKE.Node_add_child__SWIG_2(swigCPtr, Node.getCPtr(node));
  }

  public void remove_child(Node node) {
    GodotSharpSwigPINVOKE.Node_remove_child(swigCPtr, Node.getCPtr(node));
  }

  public void reparent(Node new_parent, bool keep_global_transform) {
    GodotSharpSwigPINVOKE.Node_reparent__SWIG_0(swigCPtr, Node.getCPtr(new_parent), keep_global_transform);
  }

  public void reparent(Node new_parent) {
    GodotSharpSwigPINVOKE.Node_reparent__SWIG_1(swigCPtr, Node.getCPtr(new_parent));
  }

  public int get_child_count(bool include_internal) {
    int ret = GodotSharpSwigPINVOKE.Node_get_child_count__SWIG_0(swigCPtr, include_internal);
    return ret;
  }

  public int get_child_count() {
    int ret = GodotSharpSwigPINVOKE.Node_get_child_count__SWIG_1(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_godot__TypedArrayT_godot__Node_t get_children(bool include_internal) {
    SWIGTYPE_p_godot__TypedArrayT_godot__Node_t ret = new SWIGTYPE_p_godot__TypedArrayT_godot__Node_t(GodotSharpSwigPINVOKE.Node_get_children__SWIG_0(swigCPtr, include_internal), true);
    return ret;
  }

  public SWIGTYPE_p_godot__TypedArrayT_godot__Node_t get_children() {
    SWIGTYPE_p_godot__TypedArrayT_godot__Node_t ret = new SWIGTYPE_p_godot__TypedArrayT_godot__Node_t(GodotSharpSwigPINVOKE.Node_get_children__SWIG_1(swigCPtr), true);
    return ret;
  }

  public Node get_child(int idx, bool include_internal) {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.Node_get_child__SWIG_0(swigCPtr, idx, include_internal);
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    return ret;
  }

  public Node get_child(int idx) {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.Node_get_child__SWIG_1(swigCPtr, idx);
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    return ret;
  }

  public bool has_node(SWIGTYPE_p_godot__NodePath path) {
    bool ret = GodotSharpSwigPINVOKE.Node_has_node(swigCPtr, SWIGTYPE_p_godot__NodePath.getCPtr(path));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Node get_node_internal(SWIGTYPE_p_godot__NodePath path) {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.Node_get_node_internal(swigCPtr, SWIGTYPE_p_godot__NodePath.getCPtr(path));
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Node get_node_or_null(SWIGTYPE_p_godot__NodePath path) {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.Node_get_node_or_null(swigCPtr, SWIGTYPE_p_godot__NodePath.getCPtr(path));
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Node get_parent() {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.Node_get_parent(swigCPtr);
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    return ret;
  }

  public Node find_child(GodotString pattern, bool recursive, bool owned) {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.Node_find_child__SWIG_0(swigCPtr, GodotString.getCPtr(pattern), recursive, owned);
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Node find_child(GodotString pattern, bool recursive) {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.Node_find_child__SWIG_1(swigCPtr, GodotString.getCPtr(pattern), recursive);
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Node find_child(GodotString pattern) {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.Node_find_child__SWIG_2(swigCPtr, GodotString.getCPtr(pattern));
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__TypedArrayT_godot__Node_t find_children(GodotString pattern, GodotString type, bool recursive, bool owned) {
    SWIGTYPE_p_godot__TypedArrayT_godot__Node_t ret = new SWIGTYPE_p_godot__TypedArrayT_godot__Node_t(GodotSharpSwigPINVOKE.Node_find_children__SWIG_0(swigCPtr, GodotString.getCPtr(pattern), GodotString.getCPtr(type), recursive, owned), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__TypedArrayT_godot__Node_t find_children(GodotString pattern, GodotString type, bool recursive) {
    SWIGTYPE_p_godot__TypedArrayT_godot__Node_t ret = new SWIGTYPE_p_godot__TypedArrayT_godot__Node_t(GodotSharpSwigPINVOKE.Node_find_children__SWIG_1(swigCPtr, GodotString.getCPtr(pattern), GodotString.getCPtr(type), recursive), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__TypedArrayT_godot__Node_t find_children(GodotString pattern, GodotString type) {
    SWIGTYPE_p_godot__TypedArrayT_godot__Node_t ret = new SWIGTYPE_p_godot__TypedArrayT_godot__Node_t(GodotSharpSwigPINVOKE.Node_find_children__SWIG_2(swigCPtr, GodotString.getCPtr(pattern), GodotString.getCPtr(type)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_godot__TypedArrayT_godot__Node_t find_children(GodotString pattern) {
    SWIGTYPE_p_godot__TypedArrayT_godot__Node_t ret = new SWIGTYPE_p_godot__TypedArrayT_godot__Node_t(GodotSharpSwigPINVOKE.Node_find_children__SWIG_3(swigCPtr, GodotString.getCPtr(pattern)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Node find_parent(GodotString pattern) {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.Node_find_parent(swigCPtr, GodotString.getCPtr(pattern));
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_node_and_resource(SWIGTYPE_p_godot__NodePath path) {
    bool ret = GodotSharpSwigPINVOKE.Node_has_node_and_resource(swigCPtr, SWIGTYPE_p_godot__NodePath.getCPtr(path));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Array get_node_and_resource(SWIGTYPE_p_godot__NodePath path) {
    Array ret = new Array(GodotSharpSwigPINVOKE.Node_get_node_and_resource(swigCPtr, SWIGTYPE_p_godot__NodePath.getCPtr(path)), true);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_inside_tree() {
    bool ret = GodotSharpSwigPINVOKE.Node_is_inside_tree(swigCPtr);
    return ret;
  }

  public bool is_ancestor_of(Node node) {
    bool ret = GodotSharpSwigPINVOKE.Node_is_ancestor_of(swigCPtr, Node.getCPtr(node));
    return ret;
  }

  public bool is_greater_than(Node node) {
    bool ret = GodotSharpSwigPINVOKE.Node_is_greater_than(swigCPtr, Node.getCPtr(node));
    return ret;
  }

  public SWIGTYPE_p_godot__NodePath get_path() {
    SWIGTYPE_p_godot__NodePath ret = new SWIGTYPE_p_godot__NodePath(GodotSharpSwigPINVOKE.Node_get_path(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_godot__NodePath get_path_to(Node node, bool use_unique_path) {
    SWIGTYPE_p_godot__NodePath ret = new SWIGTYPE_p_godot__NodePath(GodotSharpSwigPINVOKE.Node_get_path_to__SWIG_0(swigCPtr, Node.getCPtr(node), use_unique_path), true);
    return ret;
  }

  public SWIGTYPE_p_godot__NodePath get_path_to(Node node) {
    SWIGTYPE_p_godot__NodePath ret = new SWIGTYPE_p_godot__NodePath(GodotSharpSwigPINVOKE.Node_get_path_to__SWIG_1(swigCPtr, Node.getCPtr(node)), true);
    return ret;
  }

  public void add_to_group(StringName group, bool persistent) {
    GodotSharpSwigPINVOKE.Node_add_to_group__SWIG_0(swigCPtr, StringName.getCPtr(group), persistent);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_to_group(StringName group) {
    GodotSharpSwigPINVOKE.Node_add_to_group__SWIG_1(swigCPtr, StringName.getCPtr(group));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void remove_from_group(StringName group) {
    GodotSharpSwigPINVOKE.Node_remove_from_group(swigCPtr, StringName.getCPtr(group));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool is_in_group(StringName group) {
    bool ret = GodotSharpSwigPINVOKE.Node_is_in_group(swigCPtr, StringName.getCPtr(group));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void move_child(Node child_node, int to_index) {
    GodotSharpSwigPINVOKE.Node_move_child(swigCPtr, Node.getCPtr(child_node), to_index);
  }

  public SWIGTYPE_p_godot__TypedArrayT_godot__StringName_t get_groups() {
    SWIGTYPE_p_godot__TypedArrayT_godot__StringName_t ret = new SWIGTYPE_p_godot__TypedArrayT_godot__StringName_t(GodotSharpSwigPINVOKE.Node_get_groups(swigCPtr), true);
    return ret;
  }

  public void set_owner(Node owner) {
    GodotSharpSwigPINVOKE.Node_set_owner(swigCPtr, Node.getCPtr(owner));
  }

  public Node get_owner() {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.Node_get_owner(swigCPtr);
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    return ret;
  }

  public int get_index(bool include_internal) {
    int ret = GodotSharpSwigPINVOKE.Node_get_index__SWIG_0(swigCPtr, include_internal);
    return ret;
  }

  public int get_index() {
    int ret = GodotSharpSwigPINVOKE.Node_get_index__SWIG_1(swigCPtr);
    return ret;
  }

  public void print_tree() {
    GodotSharpSwigPINVOKE.Node_print_tree(swigCPtr);
  }

  public void print_tree_pretty() {
    GodotSharpSwigPINVOKE.Node_print_tree_pretty(swigCPtr);
  }

  public void set_scene_file_path(GodotString scene_file_path) {
    GodotSharpSwigPINVOKE.Node_set_scene_file_path(swigCPtr, GodotString.getCPtr(scene_file_path));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public GodotString get_scene_file_path() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.Node_get_scene_file_path(swigCPtr), true);
    return ret;
  }

  public void propagate_notification(int what) {
    GodotSharpSwigPINVOKE.Node_propagate_notification(swigCPtr, what);
  }

  public void propagate_call(StringName method, Array args, bool parent_first) {
    GodotSharpSwigPINVOKE.Node_propagate_call__SWIG_0(swigCPtr, StringName.getCPtr(method), Array.getCPtr(args), parent_first);
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void propagate_call(StringName method, Array args) {
    GodotSharpSwigPINVOKE.Node_propagate_call__SWIG_1(swigCPtr, StringName.getCPtr(method), Array.getCPtr(args));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void propagate_call(StringName method) {
    GodotSharpSwigPINVOKE.Node_propagate_call__SWIG_2(swigCPtr, StringName.getCPtr(method));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_physics_process(bool enable) {
    GodotSharpSwigPINVOKE.Node_set_physics_process(swigCPtr, enable);
  }

  public double get_physics_process_delta_time() {
    double ret = GodotSharpSwigPINVOKE.Node_get_physics_process_delta_time(swigCPtr);
    return ret;
  }

  public bool is_physics_processing() {
    bool ret = GodotSharpSwigPINVOKE.Node_is_physics_processing(swigCPtr);
    return ret;
  }

  public double get_process_delta_time() {
    double ret = GodotSharpSwigPINVOKE.Node_get_process_delta_time(swigCPtr);
    return ret;
  }

  public void set_process(bool enable) {
    GodotSharpSwigPINVOKE.Node_set_process(swigCPtr, enable);
  }

  public void set_process_priority(int priority) {
    GodotSharpSwigPINVOKE.Node_set_process_priority(swigCPtr, priority);
  }

  public int get_process_priority() {
    int ret = GodotSharpSwigPINVOKE.Node_get_process_priority(swigCPtr);
    return ret;
  }

  public void set_physics_process_priority(int priority) {
    GodotSharpSwigPINVOKE.Node_set_physics_process_priority(swigCPtr, priority);
  }

  public int get_physics_process_priority() {
    int ret = GodotSharpSwigPINVOKE.Node_get_physics_process_priority(swigCPtr);
    return ret;
  }

  public bool is_processing() {
    bool ret = GodotSharpSwigPINVOKE.Node_is_processing(swigCPtr);
    return ret;
  }

  public void set_process_input(bool enable) {
    GodotSharpSwigPINVOKE.Node_set_process_input(swigCPtr, enable);
  }

  public bool is_processing_input() {
    bool ret = GodotSharpSwigPINVOKE.Node_is_processing_input(swigCPtr);
    return ret;
  }

  public void set_process_shortcut_input(bool enable) {
    GodotSharpSwigPINVOKE.Node_set_process_shortcut_input(swigCPtr, enable);
  }

  public bool is_processing_shortcut_input() {
    bool ret = GodotSharpSwigPINVOKE.Node_is_processing_shortcut_input(swigCPtr);
    return ret;
  }

  public void set_process_unhandled_input(bool enable) {
    GodotSharpSwigPINVOKE.Node_set_process_unhandled_input(swigCPtr, enable);
  }

  public bool is_processing_unhandled_input() {
    bool ret = GodotSharpSwigPINVOKE.Node_is_processing_unhandled_input(swigCPtr);
    return ret;
  }

  public void set_process_unhandled_key_input(bool enable) {
    GodotSharpSwigPINVOKE.Node_set_process_unhandled_key_input(swigCPtr, enable);
  }

  public bool is_processing_unhandled_key_input() {
    bool ret = GodotSharpSwigPINVOKE.Node_is_processing_unhandled_key_input(swigCPtr);
    return ret;
  }

  public void set_process_mode(Node.ProcessMode mode) {
    GodotSharpSwigPINVOKE.Node_set_process_mode(swigCPtr, (int)mode);
  }

  public Node.ProcessMode get_process_mode() {
    Node.ProcessMode ret = (Node.ProcessMode)GodotSharpSwigPINVOKE.Node_get_process_mode(swigCPtr);
    return ret;
  }

  public bool can_process() {
    bool ret = GodotSharpSwigPINVOKE.Node_can_process(swigCPtr);
    return ret;
  }

  public void set_process_thread_group(Node.ProcessThreadGroup mode) {
    GodotSharpSwigPINVOKE.Node_set_process_thread_group(swigCPtr, (int)mode);
  }

  public Node.ProcessThreadGroup get_process_thread_group() {
    Node.ProcessThreadGroup ret = (Node.ProcessThreadGroup)GodotSharpSwigPINVOKE.Node_get_process_thread_group(swigCPtr);
    return ret;
  }

  public void set_process_thread_messages(SWIGTYPE_p_godot__BitFieldT_godot__Node__ProcessThreadMessages_t flags) {
    GodotSharpSwigPINVOKE.Node_set_process_thread_messages(swigCPtr, SWIGTYPE_p_godot__BitFieldT_godot__Node__ProcessThreadMessages_t.getCPtr(flags));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_godot__BitFieldT_godot__Node__ProcessThreadMessages_t get_process_thread_messages() {
    SWIGTYPE_p_godot__BitFieldT_godot__Node__ProcessThreadMessages_t ret = new SWIGTYPE_p_godot__BitFieldT_godot__Node__ProcessThreadMessages_t(GodotSharpSwigPINVOKE.Node_get_process_thread_messages(swigCPtr), true);
    return ret;
  }

  public void set_process_thread_group_order(int order) {
    GodotSharpSwigPINVOKE.Node_set_process_thread_group_order(swigCPtr, order);
  }

  public int get_process_thread_group_order() {
    int ret = GodotSharpSwigPINVOKE.Node_get_process_thread_group_order(swigCPtr);
    return ret;
  }

  public void set_display_folded(bool fold) {
    GodotSharpSwigPINVOKE.Node_set_display_folded(swigCPtr, fold);
  }

  public bool is_displayed_folded() {
    bool ret = GodotSharpSwigPINVOKE.Node_is_displayed_folded(swigCPtr);
    return ret;
  }

  public void set_process_internal(bool enable) {
    GodotSharpSwigPINVOKE.Node_set_process_internal(swigCPtr, enable);
  }

  public bool is_processing_internal() {
    bool ret = GodotSharpSwigPINVOKE.Node_is_processing_internal(swigCPtr);
    return ret;
  }

  public void set_physics_process_internal(bool enable) {
    GodotSharpSwigPINVOKE.Node_set_physics_process_internal(swigCPtr, enable);
  }

  public bool is_physics_processing_internal() {
    bool ret = GodotSharpSwigPINVOKE.Node_is_physics_processing_internal(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_godot__Window get_window() {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.Node_get_window(swigCPtr);
    SWIGTYPE_p_godot__Window ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_godot__Window(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_godot__Window get_last_exclusive_window() {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.Node_get_last_exclusive_window(swigCPtr);
    SWIGTYPE_p_godot__Window ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_godot__Window(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_godot__SceneTree get_tree() {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.Node_get_tree(swigCPtr);
    SWIGTYPE_p_godot__SceneTree ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_godot__SceneTree(cPtr, false);
    return ret;
  }

  public Node duplicate(int flags) {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.Node_duplicate__SWIG_0(swigCPtr, flags);
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    return ret;
  }

  public Node duplicate() {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.Node_duplicate__SWIG_1(swigCPtr);
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    return ret;
  }

  public void replace_by(Node node, bool keep_groups) {
    GodotSharpSwigPINVOKE.Node_replace_by__SWIG_0(swigCPtr, Node.getCPtr(node), keep_groups);
  }

  public void replace_by(Node node) {
    GodotSharpSwigPINVOKE.Node_replace_by__SWIG_1(swigCPtr, Node.getCPtr(node));
  }

  public void set_scene_instance_load_placeholder(bool load_placeholder) {
    GodotSharpSwigPINVOKE.Node_set_scene_instance_load_placeholder(swigCPtr, load_placeholder);
  }

  public bool get_scene_instance_load_placeholder() {
    bool ret = GodotSharpSwigPINVOKE.Node_get_scene_instance_load_placeholder(swigCPtr);
    return ret;
  }

  public void set_editable_instance(Node node, bool is_editable) {
    GodotSharpSwigPINVOKE.Node_set_editable_instance(swigCPtr, Node.getCPtr(node), is_editable);
  }

  public bool is_editable_instance(Node node) {
    bool ret = GodotSharpSwigPINVOKE.Node_is_editable_instance(swigCPtr, Node.getCPtr(node));
    return ret;
  }

  public SWIGTYPE_p_godot__Viewport get_viewport() {
    global::System.IntPtr cPtr = GodotSharpSwigPINVOKE.Node_get_viewport(swigCPtr);
    SWIGTYPE_p_godot__Viewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_godot__Viewport(cPtr, false);
    return ret;
  }

  public void queue_free() {
    GodotSharpSwigPINVOKE.Node_queue_free(swigCPtr);
  }

  public void request_ready() {
    GodotSharpSwigPINVOKE.Node_request_ready(swigCPtr);
  }

  public bool is_node_ready() {
    bool ret = GodotSharpSwigPINVOKE.Node_is_node_ready(swigCPtr);
    return ret;
  }

  public void set_multiplayer_authority(int id, bool recursive) {
    GodotSharpSwigPINVOKE.Node_set_multiplayer_authority__SWIG_0(swigCPtr, id, recursive);
  }

  public void set_multiplayer_authority(int id) {
    GodotSharpSwigPINVOKE.Node_set_multiplayer_authority__SWIG_1(swigCPtr, id);
  }

  public int get_multiplayer_authority() {
    int ret = GodotSharpSwigPINVOKE.Node_get_multiplayer_authority(swigCPtr);
    return ret;
  }

  public bool is_multiplayer_authority() {
    bool ret = GodotSharpSwigPINVOKE.Node_is_multiplayer_authority(swigCPtr);
    return ret;
  }

  public void rpc_config(StringName method, Variant config) {
    GodotSharpSwigPINVOKE.Node_rpc_config(swigCPtr, StringName.getCPtr(method), Variant.getCPtr(config));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_editor_description(GodotString editor_description) {
    GodotSharpSwigPINVOKE.Node_set_editor_description(swigCPtr, GodotString.getCPtr(editor_description));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public GodotString get_editor_description() {
    GodotString ret = new GodotString(GodotSharpSwigPINVOKE.Node_get_editor_description(swigCPtr), true);
    return ret;
  }

  public void set_unique_name_in_owner(bool enable) {
    GodotSharpSwigPINVOKE.Node_set_unique_name_in_owner(swigCPtr, enable);
  }

  public bool is_unique_name_in_owner() {
    bool ret = GodotSharpSwigPINVOKE.Node_is_unique_name_in_owner(swigCPtr);
    return ret;
  }

  public void update_configuration_warnings() {
    GodotSharpSwigPINVOKE.Node_update_configuration_warnings(swigCPtr);
  }

  public void set_deferred_thread_group(StringName property, Variant value) {
    GodotSharpSwigPINVOKE.Node_set_deferred_thread_group(swigCPtr, StringName.getCPtr(property), Variant.getCPtr(value));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void notify_deferred_thread_group(int what) {
    GodotSharpSwigPINVOKE.Node_notify_deferred_thread_group(swigCPtr, what);
  }

  public void set_thread_safe(StringName property, Variant value) {
    GodotSharpSwigPINVOKE.Node_set_thread_safe(swigCPtr, StringName.getCPtr(property), Variant.getCPtr(value));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public void notify_thread_safe(int what) {
    GodotSharpSwigPINVOKE.Node_notify_thread_safe(swigCPtr, what);
  }

  public virtual void _process(double delta) {
    GodotSharpSwigPINVOKE.Node__process(swigCPtr, delta);
  }

  public virtual void _physics_process(double delta) {
    GodotSharpSwigPINVOKE.Node__physics_process(swigCPtr, delta);
  }

  public virtual void _enter_tree() {
    GodotSharpSwigPINVOKE.Node__enter_tree(swigCPtr);
  }

  public virtual void _exit_tree() {
    GodotSharpSwigPINVOKE.Node__exit_tree(swigCPtr);
  }

  public virtual void _ready() {
    GodotSharpSwigPINVOKE.Node__ready(swigCPtr);
  }

  public virtual SWIGTYPE_p_godot__PackedStringArray _get_configuration_warnings() {
    SWIGTYPE_p_godot__PackedStringArray ret = new SWIGTYPE_p_godot__PackedStringArray(GodotSharpSwigPINVOKE.Node__get_configuration_warnings(swigCPtr), true);
    return ret;
  }

  public virtual void _input(SWIGTYPE_p_godot__RefT_godot__InputEvent_t event_) {
    GodotSharpSwigPINVOKE.Node__input(swigCPtr, SWIGTYPE_p_godot__RefT_godot__InputEvent_t.getCPtr(event_));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _shortcut_input(SWIGTYPE_p_godot__RefT_godot__InputEvent_t event_) {
    GodotSharpSwigPINVOKE.Node__shortcut_input(swigCPtr, SWIGTYPE_p_godot__RefT_godot__InputEvent_t.getCPtr(event_));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _unhandled_input(SWIGTYPE_p_godot__RefT_godot__InputEvent_t event_) {
    GodotSharpSwigPINVOKE.Node__unhandled_input(swigCPtr, SWIGTYPE_p_godot__RefT_godot__InputEvent_t.getCPtr(event_));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _unhandled_key_input(SWIGTYPE_p_godot__RefT_godot__InputEvent_t event_) {
    GodotSharpSwigPINVOKE.Node__unhandled_key_input(swigCPtr, SWIGTYPE_p_godot__RefT_godot__InputEvent_t.getCPtr(event_));
    if (GodotSharpSwigPINVOKE.SWIGPendingException.Pending) throw GodotSharpSwigPINVOKE.SWIGPendingException.Retrieve();
  }

  public Node() : this(GodotSharpSwigPINVOKE.new_Node(), true) {
  }

  public enum ProcessMode {
    PROCESS_MODE_INHERIT = 0,
    PROCESS_MODE_PAUSABLE = 1,
    PROCESS_MODE_WHEN_PAUSED = 2,
    PROCESS_MODE_ALWAYS = 3,
    PROCESS_MODE_DISABLED = 4
  }

  public enum ProcessThreadGroup {
    PROCESS_THREAD_GROUP_INHERIT = 0,
    PROCESS_THREAD_GROUP_MAIN_THREAD = 1,
    PROCESS_THREAD_GROUP_SUB_THREAD = 2
  }

  public enum ProcessThreadMessages {
    FLAG_PROCESS_THREAD_MESSAGES = 1,
    FLAG_PROCESS_THREAD_MESSAGES_PHYSICS = 2,
    FLAG_PROCESS_THREAD_MESSAGES_ALL = 3
  }

  public enum DuplicateFlags {
    DUPLICATE_SIGNALS = 1,
    DUPLICATE_GROUPS = 2,
    DUPLICATE_SCRIPTS = 4,
    DUPLICATE_USE_INSTANTIATION = 8
  }

  public enum InternalMode {
    INTERNAL_MODE_DISABLED = 0,
    INTERNAL_MODE_FRONT = 1,
    INTERNAL_MODE_BACK = 2
  }

  public static readonly int NOTIFICATION_ENTER_TREE = GodotSharpSwigPINVOKE.Node_NOTIFICATION_ENTER_TREE_get();
  public static readonly int NOTIFICATION_EXIT_TREE = GodotSharpSwigPINVOKE.Node_NOTIFICATION_EXIT_TREE_get();
  public static readonly int NOTIFICATION_MOVED_IN_PARENT = GodotSharpSwigPINVOKE.Node_NOTIFICATION_MOVED_IN_PARENT_get();
  public static readonly int NOTIFICATION_READY = GodotSharpSwigPINVOKE.Node_NOTIFICATION_READY_get();
  public static readonly int NOTIFICATION_PAUSED = GodotSharpSwigPINVOKE.Node_NOTIFICATION_PAUSED_get();
  public static readonly int NOTIFICATION_UNPAUSED = GodotSharpSwigPINVOKE.Node_NOTIFICATION_UNPAUSED_get();
  public static readonly int NOTIFICATION_PHYSICS_PROCESS = GodotSharpSwigPINVOKE.Node_NOTIFICATION_PHYSICS_PROCESS_get();
  public static readonly int NOTIFICATION_PROCESS = GodotSharpSwigPINVOKE.Node_NOTIFICATION_PROCESS_get();
  public static readonly int NOTIFICATION_PARENTED = GodotSharpSwigPINVOKE.Node_NOTIFICATION_PARENTED_get();
  public static readonly int NOTIFICATION_UNPARENTED = GodotSharpSwigPINVOKE.Node_NOTIFICATION_UNPARENTED_get();
  public static readonly int NOTIFICATION_SCENE_INSTANTIATED = GodotSharpSwigPINVOKE.Node_NOTIFICATION_SCENE_INSTANTIATED_get();
  public static readonly int NOTIFICATION_DRAG_BEGIN = GodotSharpSwigPINVOKE.Node_NOTIFICATION_DRAG_BEGIN_get();
  public static readonly int NOTIFICATION_DRAG_END = GodotSharpSwigPINVOKE.Node_NOTIFICATION_DRAG_END_get();
  public static readonly int NOTIFICATION_PATH_RENAMED = GodotSharpSwigPINVOKE.Node_NOTIFICATION_PATH_RENAMED_get();
  public static readonly int NOTIFICATION_CHILD_ORDER_CHANGED = GodotSharpSwigPINVOKE.Node_NOTIFICATION_CHILD_ORDER_CHANGED_get();
  public static readonly int NOTIFICATION_INTERNAL_PROCESS = GodotSharpSwigPINVOKE.Node_NOTIFICATION_INTERNAL_PROCESS_get();
  public static readonly int NOTIFICATION_INTERNAL_PHYSICS_PROCESS = GodotSharpSwigPINVOKE.Node_NOTIFICATION_INTERNAL_PHYSICS_PROCESS_get();
  public static readonly int NOTIFICATION_POST_ENTER_TREE = GodotSharpSwigPINVOKE.Node_NOTIFICATION_POST_ENTER_TREE_get();
  public static readonly int NOTIFICATION_DISABLED = GodotSharpSwigPINVOKE.Node_NOTIFICATION_DISABLED_get();
  public static readonly int NOTIFICATION_ENABLED = GodotSharpSwigPINVOKE.Node_NOTIFICATION_ENABLED_get();
  public static readonly int NOTIFICATION_NODE_RECACHE_REQUESTED = GodotSharpSwigPINVOKE.Node_NOTIFICATION_NODE_RECACHE_REQUESTED_get();
  public static readonly int NOTIFICATION_EDITOR_PRE_SAVE = GodotSharpSwigPINVOKE.Node_NOTIFICATION_EDITOR_PRE_SAVE_get();
  public static readonly int NOTIFICATION_EDITOR_POST_SAVE = GodotSharpSwigPINVOKE.Node_NOTIFICATION_EDITOR_POST_SAVE_get();
  public static readonly int NOTIFICATION_WM_MOUSE_ENTER = GodotSharpSwigPINVOKE.Node_NOTIFICATION_WM_MOUSE_ENTER_get();
  public static readonly int NOTIFICATION_WM_MOUSE_EXIT = GodotSharpSwigPINVOKE.Node_NOTIFICATION_WM_MOUSE_EXIT_get();
  public static readonly int NOTIFICATION_WM_WINDOW_FOCUS_IN = GodotSharpSwigPINVOKE.Node_NOTIFICATION_WM_WINDOW_FOCUS_IN_get();
  public static readonly int NOTIFICATION_WM_WINDOW_FOCUS_OUT = GodotSharpSwigPINVOKE.Node_NOTIFICATION_WM_WINDOW_FOCUS_OUT_get();
  public static readonly int NOTIFICATION_WM_CLOSE_REQUEST = GodotSharpSwigPINVOKE.Node_NOTIFICATION_WM_CLOSE_REQUEST_get();
  public static readonly int NOTIFICATION_WM_GO_BACK_REQUEST = GodotSharpSwigPINVOKE.Node_NOTIFICATION_WM_GO_BACK_REQUEST_get();
  public static readonly int NOTIFICATION_WM_SIZE_CHANGED = GodotSharpSwigPINVOKE.Node_NOTIFICATION_WM_SIZE_CHANGED_get();
  public static readonly int NOTIFICATION_WM_DPI_CHANGE = GodotSharpSwigPINVOKE.Node_NOTIFICATION_WM_DPI_CHANGE_get();
  public static readonly int NOTIFICATION_VP_MOUSE_ENTER = GodotSharpSwigPINVOKE.Node_NOTIFICATION_VP_MOUSE_ENTER_get();
  public static readonly int NOTIFICATION_VP_MOUSE_EXIT = GodotSharpSwigPINVOKE.Node_NOTIFICATION_VP_MOUSE_EXIT_get();
  public static readonly int NOTIFICATION_OS_MEMORY_WARNING = GodotSharpSwigPINVOKE.Node_NOTIFICATION_OS_MEMORY_WARNING_get();
  public static readonly int NOTIFICATION_TRANSLATION_CHANGED = GodotSharpSwigPINVOKE.Node_NOTIFICATION_TRANSLATION_CHANGED_get();
  public static readonly int NOTIFICATION_WM_ABOUT = GodotSharpSwigPINVOKE.Node_NOTIFICATION_WM_ABOUT_get();
  public static readonly int NOTIFICATION_CRASH = GodotSharpSwigPINVOKE.Node_NOTIFICATION_CRASH_get();
  public static readonly int NOTIFICATION_OS_IME_UPDATE = GodotSharpSwigPINVOKE.Node_NOTIFICATION_OS_IME_UPDATE_get();
  public static readonly int NOTIFICATION_APPLICATION_RESUMED = GodotSharpSwigPINVOKE.Node_NOTIFICATION_APPLICATION_RESUMED_get();
  public static readonly int NOTIFICATION_APPLICATION_PAUSED = GodotSharpSwigPINVOKE.Node_NOTIFICATION_APPLICATION_PAUSED_get();
  public static readonly int NOTIFICATION_APPLICATION_FOCUS_IN = GodotSharpSwigPINVOKE.Node_NOTIFICATION_APPLICATION_FOCUS_IN_get();
  public static readonly int NOTIFICATION_APPLICATION_FOCUS_OUT = GodotSharpSwigPINVOKE.Node_NOTIFICATION_APPLICATION_FOCUS_OUT_get();
  public static readonly int NOTIFICATION_TEXT_SERVER_CHANGED = GodotSharpSwigPINVOKE.Node_NOTIFICATION_TEXT_SERVER_CHANGED_get();
}
